1. Stack (LIFO - Last In, First Out)
Stack არის მონაცემთა სტრუქტურა, სადაც უკანასკნელი დამატებული ელემენტი ამოიღება პირველი. 
ეს სტრუქტურა მოქმედებს პრინციპით "უკანასკნელი შესული — პირველი გასული" (Last In, First Out). 
Stack-ის მექანიზმი ხშირად გამოიყენება ისეთ ალგორითმებში, სადაც საჭიროა ე.წ. "დაბრუნება" ან "რეკურსიული მოქმედებები", 
მაგალითად ხის სტრუქტურებთან მუშაობისას.

სიღრმის ძიების ალგორითმი (Depth-First Search, DFS)
Stack განსაკუთრებულად მნიშვნელოვანია DFS-ის ალგორითმში. DFS იწყებს ძიებას გრაფის ან ხის რომელიმე წვეროდან და გადადის ერთ მიმართულებაზე მანამ, სანამ ბოლომდე არ მივა. 
შემდეგ უკან ბრუნდება და იკვლევს სხვა გზებს. Stack-ის მეშვეობით სისტემა ინახავს ჯერ-ჯერობით აღმოჩენილ მდგომარეობებს და უკან უბრუნდება იმ წერტილს, 
სადაც სხვა მიმართულებების გამოკვლევა ჯერ არ მომხდარა.

გამოყენების შემთხვევები:
პაზლები და თამაშები: Stack-ის დახმარებით DFS ალგორითმი ეფექტურია თამაშების ამოხსნაში, სადაც საჭიროა ყველა შესაძლო მოძრაობის გამოკვლევა.
გრაფებში სიღრმეში ძიება: მაგალითად, სადაც მიზანია გამოიკვლიოთ ყველაზე "ღრმა წვეროები" ან გრაფის რთულ სიღრმეებში აღმოაჩინოთ საჭირო ინფორმაცია.

სარგებელი:
მეხსიერების ეფექტიანობა: DFS იყენებს ნაკლებ მეხსიერებას შედარებით BFS-თან, 
რადგან მისი მთავარი მიზანია ერთ გზას ბოლომდე მიჰყვეს და მხოლოდ შემდეგ გადახედოს სხვა მიმართულებებს.
ოპტიმალური ალგორითმები: Stack-based ალგორითმები ეფექტურად მუშაობს ისეთ ამოცანებში, 
სადაც ყველა მდგომარეობის გამოკვლევა არ არის საჭირო, მაგალითად თამაშებში, სადაც არსებობს სწრაფი გზები.

2. Queue (FIFO - First In, First Out)
Queue სტრუქტურა არის რიგი, სადაც პირველი დამატებული ელემენტი პირველი ამოიღება. 
ეს არის სტრუქტურა, რომელიც ეყრდნობა პრინციპს "პირველი შესული — პირველი გასული" (First In, First Out). 
Queue სტრუქტურა კრიტიკული მნიშვნელობისაა სიგანეში ძიების ალგორითმში (Breadth-First Search, BFS), 
რომელიც თანაბრად იკვლევს ყველა შესაძლო გზას და ყოველი მომდევნო ნაბიჯი ერთ დონეზე აგრძელებს ძიებას.

სიგანეში ძიების ალგორითმი (BFS)
BFS იყენებს Queue-ს, რათა ყოველი მომდევნო ნაბიჯი თანაბრად გამოიკვლიოს. ანუ, BFS პირველ რიგში აკვირდება იმ წვეროებს, 
რომლებიც ყველაზე ახლოს არიან საწყის წერტილთან და შემდეგ ამოწმებს უფრო შორეულ კვანძებს. ეს ალგორითმი იძლევა ყველაზე მოკლე გზას გრაფში.

გამოყენების შემთხვევები:
ნავიგაციის სისტემები: BFS და Queue ხშირად გამოიყენება გზის გრაფებში, სადაც საჭიროა უახლოესი და სწრაფი მარშრუტების პოვნა.
სოციალური ქსელების ძიება: სოციალური ქსელების კვლევაში, BFS შეიძლება გამოიყენოთ, რათა გამოიკვლიოთ, 
რამდენი კავშირით არის დაკავშირებული მომხმარებლები ერთმანეთთან.

სარგებელი:
ყველაზე მოკლე გზა: BFS იძლევა ყველა შესაძლო გზის თანაბარ გამოკვლევას, რის შედეგადაც ყოველთვის პოულობს მოკლე გზას საწყის წერტილსა და მიზანს შორის.
სრულყოფილება: BFS გამოდის ყველა შესაძლო მდგომარეობიდან და მის შედეგში დარწმუნებული ვართ, რომ მინიმალური ნაბიჯებით მივაღწევთ მიზანს.

3. Priority Queue (პრიორიტეტული რიგი)
Priority Queue წარმოადგენს რიგს, სადაც ელემენტებს მიენიჭებათ პრიორიტეტი. რაც უფრო მაღალი პრიორიტეტი აქვს ელემენტს, მით უფრო ადრე "დაინახავს" მას ალგორითმი. 
ეს სტრუქტურა ხშირად გამოიყენება ეურისტიკულ ალგორითმებში, მაგალითად A* ალგორითმში, 
სადაც თითოეულ მდგომარეობას აქვს შეფასება და პრიორიტეტი.

A* ალგორითმი
A* ალგორითმი არის გრაფების გამოკვლევის ერთ-ერთი ყველაზე პოპულარული მეთოდი, რომელიც იყენებს ეურისტიკულ ფუნქციას, რათა სწრაფად იპოვოს საუკეთესო მარშრუტი. 
ამ ალგორითმში Priority Queue გამოიყენება იმისთვის, რომ ჯერ-ჯერობით არსებული საუკეთესო ვარიანტები გაიაროს პირველი. 
A* ალგორითმი ერთდროულად ითვალისწინებს რეალურ გზის ღირებულებას და ასევე ეურისტიკურ შეფასებას, რაც აჩქარებს ოპტიმალური გზის პოვნას.

გამოყენების შემთხვევები:
GPS ნავიგაციები: როდესაც სისტემა ითვლის მარშრუტებს და ირჩევს ყველაზე ეფექტურ გზას, A* ალგორითმი ხშირად გამოიყენება.
მონაცემთა გადაცემის ქსელები: ქსელების მენეჯმენტში და ანალიტიკაში Priority Queue-ს გამოყენება ეხმარება ტრაფიკის ოპტიმიზაციაში, 
სადაც პრიორიტეტული პაკეტები გაივლის უფრო სწრაფად.

სარგებელი:
ინფორმაციული ძიება: Priority Queue უზრუნველყოფს ყველაზე პერსპექტიული მიმართულებების გამოკვლევას და აჩქარებს ოპტიმალური გზების პოვნას.
ეურისტიკის მხარდაჭერა: A* ალგორითმები ეურისტიკით გამოიყენებენ დამატებით ინფორმაციულ კრიტერიუმებს, რაც საშუალებას იძლევა უფრო ეფექტურად გამოიკვლიონ რთული გზები.